// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  employeeCode String    @unique // Add this line
  password     String
  role         String
  efirstName   String?
  elastName    String?
  mail         String    @unique
  position     String?
  department   String?
  startWork    DateTime?
  workAge      Int?
  status       String    @default("Active")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  leaveRequests     LeaveRequest[]
  attendanceRecords Attendance[]
}

enum Role {
  HR
  EMPLOYEE
}

model Attendance {
  id       Int       @id @default(autoincrement())
  checkIn  DateTime
  checkOut DateTime?
  user     User      @relation(fields: [userId], references: [id])
  userId   Int
}

model LeaveRequest {
  id         Int      @id @default(autoincrement())
  type       String
  reason     String
  startDate  DateTime
  endDate    DateTime
  status     String   @default("รอดำเนินการ")
  attachment String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}

model Department {
  id          Int      @id @default(autoincrement())
  thainame    String   @unique
  engname     String   @unique
  shortname   String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  position Position[] // ความสัมพันธ์แบบ one-to-many
}

model Position {
  id        Int      @id @default(autoincrement())
  thainame  String   @unique
  engname   String   @unique
  shortname String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id]) // ความสัมพันธ์แบบ many-to-one
}
