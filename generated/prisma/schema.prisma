// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int    @id @default(autoincrement())
  employeeCode String @unique
  password     String
  role         String

  // ข้อมูลส่วนตัว
  efirstName       String
  elastName        String
  mail             String?   @unique
  citizenId        String? // เลขบัตรประชาชน
  birthDate        DateTime?
  age              Int?
  gender           Gender?
  phone            String?
  emergencyContact String?

  // ที่อยู่และรูปถ่าย
  address String?
  photo   String? // URL หรือ path

  // การทำงาน
  startWork    DateTime
  endWork      DateTime?
  workAge      Int?
  workType     WorkType?
  workStatus   WorkStatus? @default(ACTIVE)
  level        String? // เช่น Junior, Senior
  // position       String?   // หรือลิงก์กับ Position Model
  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id])
  salary       Float?

  // บัญชีเงินเดือน
  bankName    String?
  bankAccount String?

  // เอกสาร
  contractFile String?
  personalFile String?
  resumeFile   String?
  idCardFile   String?
  houseRegFile String?

  // เวลาสร้าง/อัปเดต
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ความสัมพันธ์
  leaveRequests     LeaveRequest[]
  attendanceRecords Attendance[]

  positionId Int?
  position   Position? @relation(fields: [positionId], references: [id])
}

enum Role {
  HR
  EMPLOYEE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum WorkType {
  FULLTIME
  CONTRACT
  FREELANCE
}

enum WorkStatus {
  ACTIVE
  RESIGNED
  SUSPENDED
}

model Attendance {
  id       Int       @id @default(autoincrement())
  checkIn  DateTime
  checkOut DateTime?
  user     User      @relation(fields: [userId], references: [id])
  userId   Int
}

model LeaveRequest {
  id         Int      @id @default(autoincrement())
  type       String
  reason     String
  startDate  DateTime
  endDate    DateTime
  status     String   @default("รอดำเนินการ")
  attachment String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}

model Department {
  id          Int      @id @default(autoincrement())
  thainame    String   @unique
  engname     String   @unique
  shortname   String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users    User[]
  position Position[] // ความสัมพันธ์แบบ one-to-many
}

model Position {
  id        Int      @id @default(autoincrement())
  thainame  String   @unique
  engname   String   @unique
  shortname String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users        User[]
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id]) // ความสัมพันธ์แบบ many-to-one
}
